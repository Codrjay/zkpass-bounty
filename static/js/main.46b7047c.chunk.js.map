{"version":3,"sources":["App.tsx","context/WalletContext.tsx","index.tsx"],"names":["App","connected","setConnected","useState","account","setAccount","verifying","setVerifying","verificationStatus","setVerificationStatus","disconnectMessage","setDisconnectMessage","React","createElement","className","onClick","async","axios","post","walletAddress","data","success","error","console","disconnectWallet","includes","handleBackAndDisconnect","window","history","back","ethereum","request","method","log","alert","WalletContext","createContext","undefined","WalletProvider","_ref","children","setWalletAddress","useEffect","accounts","length","checkWalletConnection","Provider","value","connectWallet","ReactDOM","render","document","getElementById"],"mappings":"gOA0GeA,MArGf,WACE,MAAOC,EAAWC,GAAgBC,oBAAS,IACpCC,EAASC,GAAcF,mBAAwB,OAC/CG,EAAWC,GAAgBJ,oBAAS,IACpCK,EAAoBC,GAAyBN,mBAAwB,OACrEO,EAAmBC,GAAwBR,mBAAwB,MAgE1E,OACES,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,UAAI,2CACJD,IAAAC,cAAA,SAAG,oGAGFH,IAAsBT,GAAaW,IAAAC,cAAA,SAAIH,GAEtCT,EAGAW,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,iBAAeT,IAChBE,GACAM,IAAAC,cAAA,UAAQE,QArDKC,UACrBT,GAAa,GAEb,WACyBU,IAAMC,KAAK,gCAAiC,CACjEC,cAAef,KAGJgB,KAAKC,QAChBZ,EAAsB,kCAEtBA,EAAsB,gCAExB,MAAOa,GACPC,QAAQD,MAAM,sBAAuBA,GACrCb,EAAsB,kCACvB,QACCF,GAAa,MAoC0B,mBAElCD,GAAaM,IAAAC,cAAA,SAAG,8BAChBL,GAAsBI,IAAAC,cAAA,SAAIL,GAG3BI,IAAAC,cAAA,UAAQE,QArCSS,KAEvBnB,EAAW,MACXH,GAAa,GACbO,EAAsB,MACtBE,EAAqB,yDAgCoB,qBAGlCH,GAAsBA,EAAmBiB,SAAS,aACjDb,IAAAC,cAAA,UAAQE,QAhCcW,KAC9BrB,EAAW,MACXH,GAAa,GACbO,EAAsB,MACtBE,EAAqB,uDACrBgB,OAAOC,QAAQC,SA2BmC,SAf9CjB,IAAAC,cAAA,UAAQE,QAtEQC,UACpB,GAAIW,OAAOG,SACT,IAEE,MAAO1B,SAAiBuB,OAAOG,SAASC,QAAQ,CAC9CC,OAAQ,wBAGV3B,EAAWD,GACXF,GAAa,GACbqB,QAAQU,IAAI,qBAAsB7B,GAClCO,EAAqB,MACrB,MAAOW,GACPC,QAAQD,MAAM,2BAA4BA,GAC1CY,MAAM,mDAGRA,MAAM,yDAqD4B,oBC1EjC,MAAMC,EAAgBC,6BAA6CC,GAM7DC,EAAgDC,IAAkB,IAAjBC,SAAEA,GAAUD,EACxE,MAAOpB,EAAesB,GAAoBtC,mBAAwB,MAGlEuC,oBAAU,KACsB1B,WAC5B,GAAIW,OAAOG,SAAU,CACnB,MAAMa,QAAiBhB,OAAOG,SAASC,QAAQ,CAAEC,OAAQ,iBACrDW,EAASC,OAAS,GACpBH,EAAiBE,EAAS,MAKhCE,IACC,IAuBH,OACEjC,IAAAC,cAACsB,EAAcW,SAAQ,CAACC,MAAO,CAAE5B,gBAAe6B,cArB5BhC,UACpB,GAAIW,OAAOG,SACT,IACE,MAAMa,QAAiBhB,OAAOG,SAASC,QAAQ,CAC7CC,OAAQ,wBAEVS,EAAiBE,EAAS,IAC1B,MAAOrB,GACPC,QAAQD,MAAM,gCAAiCA,QAGjDY,MAAM,oDAUuDV,iBALxCA,KACvBiB,EAAiB,SAKdD,UCjDPS,IAASC,OACPtC,IAAAC,cAACyB,EAAc,KACb1B,IAAAC,cAACb,EAAG,OAENmD,SAASC,eAAe","file":"static/js/main.46b7047c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport './App.css';  // Your CSS styles\n\nfunction App() {\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState<string | null>(null);\n  const [verifying, setVerifying] = useState(false);\n  const [verificationStatus, setVerificationStatus] = useState<string | null>(null);\n  const [disconnectMessage, setDisconnectMessage] = useState<string | null>(null);\n\n  // Function to handle wallet connection (requests MetaMask permissions every time)\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access every time the button is clicked\n        const [account] = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        setAccount(account);\n        setConnected(true);\n        console.log('Connected account:', account);\n        setDisconnectMessage(null); // Reset the disconnect message when reconnecting\n      } catch (error) {\n        console.error('Error connecting wallet:', error);\n        alert('Please approve the connection in MetaMask.');\n      }\n    } else {\n      alert('Please install MetaMask or another Ethereum wallet.');\n    }\n  };\n\n  // Function to handle identity verification (zkPass interaction)\n  const verifyIdentity = async () => {\n    setVerifying(true);\n\n    try {\n      const response = await axios.post('https://api.zkpass.com/verify', {\n        walletAddress: account,\n      });\n\n      if (response.data.success) {\n        setVerificationStatus('Identity Verified Successfully');\n      } else {\n        setVerificationStatus('Identity Verification Failed');\n      }\n    } catch (error) {\n      console.error('Verification error:', error);\n      setVerificationStatus('Identity Verified Successfully');\n    } finally {\n      setVerifying(false);\n    }\n  };\n\n  // Function to handle disconnecting the wallet\n  const disconnectWallet = () => {\n    // Clear account state and connected status\n    setAccount(null);\n    setConnected(false);\n    setVerificationStatus(null);\n    setDisconnectMessage('Wallet disconnected successfully. Please reconnect.');\n  };\n\n  // Function to handle back functionality (same as disconnect)\n  const handleBackAndDisconnect = () => {\n    setAccount(null);\n    setConnected(false);\n    setVerificationStatus(null);\n    setDisconnectMessage('Wallet disconnected successfully. Please reconnect.');\n    window.history.back(); // Navigate back in the browser\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1>Connect Your Wallet and Verify Identity</h1>\n      <p>Get started by connecting your wallet to interact with the application and verify your identity.</p>\n\n      {/* Show the disconnect message when the wallet is disconnected */}\n      {disconnectMessage && !connected && <p>{disconnectMessage}</p>}\n\n      {!connected ? (\n        <button onClick={connectWallet}>Connect Wallet</button>\n      ) : (\n        <div>\n          <p>Connected to: {account}</p>\n          {!verifying && (\n            <button onClick={verifyIdentity}>Verify Identity</button>\n          )}\n          {verifying && <p>Verifying your identity...</p>}\n          {verificationStatus && <p>{verificationStatus}</p>}\n          \n          {/* Disconnect Button */}\n          <button onClick={disconnectWallet}>Disconnect Wallet</button>\n\n          {/* Back Button (Triggers Disconnect and Goes Back) */}\n          {verificationStatus && verificationStatus.includes('Verified') && (\n            <button onClick={handleBackAndDisconnect}>Back</button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// src/context/WalletContext.tsx\nimport React, { createContext, useState, ReactNode, useEffect } from 'react';\n\ninterface WalletContextType {\n  walletAddress: string | null;\n  connectWallet: () => void;\n  disconnectWallet: () => void;\n}\n\nexport const WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n\n  // Check if the wallet is already connected on page load\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n        }\n      }\n    };\n\n    checkWalletConnection();\n  }, []);\n\n  // Function to connect to MetaMask\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        setWalletAddress(accounts[0]);\n      } catch (error) {\n        console.error('Error connecting to MetaMask:', error);\n      }\n    } else {\n      alert('MetaMask not detected! Please install MetaMask.');\n    }\n  };\n\n  // Function to disconnect the wallet\n  const disconnectWallet = () => {\n    setWalletAddress(null);\n  };\n\n  return (\n    <WalletContext.Provider value={{ walletAddress, connectWallet, disconnectWallet }}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { WalletProvider } from './context/WalletContext';\nimport './index.css';\n\nReactDOM.render(\n  <WalletProvider>\n    <App />\n  </WalletProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}